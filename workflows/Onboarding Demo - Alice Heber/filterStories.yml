id: filterStories
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - allowedGroupIds: []
    - streamResponse: false
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        if (!fetchStoryDetails) {
            throw new Error('No iterable was provided')
          }
          const iterableData = fetchStoryDetails.data
          if (!iterableData) {
            throw new Error ('No input data found. Did you forget to run the fetchStoryDetails block?')
          }
          if (typeof iterableData === 'string' || typeof iterableData[Symbol.iterator] !== 'function') {
            throw new Error('Input data from fetchStoryDetails was not iterable')
          }
          return fetchStoryDetails.data.filter((value, index) => value.score > 700)
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - workflowBlockUuid: null
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: '[]'
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-02-11T12:19:53.159Z
blockData:
  top: 48
  left: 1744
  uuid: 055ff32a-7ed9-4cf8-a88d-584f36ffcceb
  options:
    blockToIterate: 1c5daf9f-4bae-4d9d-a36a-2d3e44fa6085
    filterStatement: value.score > 700
  pluginId: filterStories
  blockType: filter
  editorType: JavascriptQuery
  resourceName: JavascriptQuery
  retryPanelOpen: false
  incomingOnSuccessEdges:
    - 1c5daf9f-4bae-4d9d-a36a-2d3e44fa6085
