id: stepsQuery
type: datasource
subtype: GraphQLQuery
resourceName: bac1861c-bf9e-4819-997b-4aecaf67baf3
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - allowedGroupIds: []
    - streamResponse: false
    - body: >-
        query RecruitmentSteps($candidateFilters: CandidateFilterInput,
        $afterCursor: String, $statuses: [RecruitmentStepStatusEnum!]){
          recruitmentSteps(candidateFilters: $candidateFilters, type: SCREENER, first: 10, after: $afterCursor, statuses: $statuses){
            pageInfo{
              startCursor
              endCursor
              hasNextPage
            }
            nodes{
              id
              candidate{
                id
                givenName
                phoneNumber
                cropType
                locationId
                location{
                  region
                }
                address{
                  streetAddress
                  village
                  subDistrict
                  district
                }
                createdAt
                referralSource
              }
              ... on ScreenerStep{
                submissionStatus
                pendingSince
                notes{
                  content
                  createdAt
                  createdBy{
                    displayName
                  }
                }
                screenerSubmission{
                  confidenceLevel
                  score
                  category
                  screenerAnswers{
                    id
                    questionText
                    answer
                  }
                }
              }
            }
          }
        }
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: '{{ !enableModule.value }}'
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - paginationPaginationField: ''
    - headers: ''
    - workflowRunId: null
    - showFailureToaster: true
    - paginationEnabled: false
    - query: ''
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - workflowBlockUuid: null
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - graphQLVariables: >-
        [{"key":"candidateFilters","value":"{{ candidateFilters.value
        }}"},{"key":"afterCursor","value":"{{
        screenerPendingTable.pagination.afterCursor || null
        }}"},{"key":"statuses","value":"{{ screenerStatusSelect.value
        ?[screenerStatusSelect.value] : ['IN_PROGRESS', 'NEEDS_REVIEW'] }}"}]
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - cookies: ''
    - metadata: null
    - workflowActionType: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        //Use the variables data, metadata, and errors to reference these fields
        from your query's results

        if (Array.isArray(errors) && errors.length > 0) {
          return errors[0].message;
        } else {
          return false
        }
            
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: ''
    - graphQLErrors: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: |-
        function build_location(candidate){
          if(candidate.locationId) return candidate.location.region;
          else return candidate.address.district;
        }

        data.recruitmentSteps.nodes.forEach(step => {
          step.region = build_location(step.candidate)
        });

        return {
          pagination: data.recruitmentSteps.pageInfo,
          recruitmentSteps: data.recruitmentSteps.nodes
        }
         
    - events: []
    - isMultiplayerEdited: false
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: raw
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2024-02-01T09:53:42.056Z
